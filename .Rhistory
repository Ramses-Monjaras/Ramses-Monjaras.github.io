summary(model)
par(mfrow = c(1, 3))
plot(df$User_Rating, df$Active_Players, main = "Active Players vs User Rating", xlab = "User Rating", ylab = "Active Players", pch = 16, col = "blue")
abline(lm(Active_Players ~ User_Rating, data = df), col = "red")
plot(df$Global_Sales, df$Active_Players, main = "Active Players vs Global Sales", xlab = "Global Sales", ylab = "Active Players", pch = 16, col = "green")
abline(lm(Active_Players~ Global_Sales, data = df), col = "red")
plot(df$Release_Year, df$Active_Players, main = "Active Players vs Release Year", xlab = "x3", ylab = "y", pch = 16, col = "purple")
abline(lm(Active_Players~ Release_Year, data = df), col = "red")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- lm(Active_Players ~ User_Rating + Global_Sales + Release_Year, data = df)
summary(model)
par(mfrow = c(1, 3))
plot(df$User_Rating, df$Active_Players, main = "Active Players vs User Rating", xlab = "User Rating", ylab = "Active Players", pch = 16, col = "blue")
abline(lm(Active_Players ~ User_Rating, data = df), col = "red")
plot(df$Global_Sales, df$Active_Players, main = "Active Players vs Global Sales", xlab = "Global Sales", ylab = "Active Players", pch = 16, col = "green")
abline(lm(Active_Players~ Global_Sales, data = df), col = "red")
plot(df$Release_Year, df$Active_Players, main = "Active Players vs Release Year", xlab = "Release Year", ylab = "Active Players", pch = 16, col = "purple")
abline(lm(Active_Players~ Release_Year, data = df), col = "red")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- lm(Active_Players ~ User_Rating + Global_Sales + Release_Year, data = df)
summary(model)
par(mfrow = c(1, 3))
plot(df$User_Rating, df$Active_Players, main = "Active Players vs User Rating", xlab = "User Rating", ylab = "Active Players", pch = 16, col = "blue")
abline(lm(Active_Players ~ User_Rating, data = df), col = "red")
plot(df$Global_Sales, df$Active_Players, main = "Active Players vs Global Sales", xlab = "Global Sales", ylab = "Active Players", pch = 16, col = "green")
abline(lm(Active_Players~ Global_Sales, data = df), col = "red")
plot(df$Release_Year, df$Active_Players, main = "Active Players vs Release Year", xlab = "Release Year", ylab = "Active Players", pch = 16, col = "purple")
abline(lm(Active_Players~ Release_Year, data = df), col = "red")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- lm(Active_Players ~ User_Rating, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(data, aes(x = Active_Players, y = User_Rating, color = x2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of y vs x1, colored by x2",
x = "x1", y = "y", color = "x2") +
theme_minimal()
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(data, aes(x = Active_Players, y = User_Rating, color = Global_Sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of y vs x1, colored by x2",
x = "x1", y = "y", color = "x2") +
theme_minimal()
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(data, aes(x = Active_Players, y = User_Rating, color = red)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of y vs x1, colored by x2",
x = "x1", y = "y", color = "x2") +
theme_minimal()
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(df, aes(x = Active_Players, y = User_Rating, color = red)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of y vs x1, colored by x2",
x = "x1", y = "y", color = "x2") +
theme_minimal()
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(df, aes(x = Active_Players, y = User_Rating, color = Global_Sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of y vs x1, colored by x2",
x = "x1", y = "y", color = "x2") +
theme_minimal()
interaction.plot(df$Active_Players, df$Global_Sales, df$User_Rating,
xlab = "x1", ylab = "y", trace.label = "x2",
main = "Interaction Plot of x1 and x2 on y")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(df, aes(x = Active_Players, y = User_Rating, color = Global_Sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of User Rating vs Active Players, colored by Global Sales",
x = "Active Players", y = "User Rating", color = "Global Sales") +
theme_minimal()
interaction.plot(df$Active_Players, df$Global_Sales, df$User_Rating,
xlab = "Active Players", ylab = "User Rating", trace.label = "Global Sales",
main = "Interaction Plot of Active Players and Global Sales on User Rating")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- lm(User_Rating ~ Active_Players + Global_Sales + Active_Players:Global_Sales, data = df)
summary(model)
ggplot(df, aes(x = Active_Players, y = User_Rating, color = Global_Sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter plot of User Rating vs Active Players, colored by Global Sales",
x = "Active Players", y = "User Rating", color = "Global Sales") +
theme_minimal()
interaction.plot(df$Active_Players, df$Global_Sales, df$User_Rating,
xlab = "Active Players", ylab = "User Rating", trace.label = "Global Sales",
main = "Interaction Plot of Active Players and Global Sales on User Rating")
par(mfrow = c(2, 2))
plot(model)
coefficients <- coef(model)
print(coefficients)
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
print(paste("R-squared:", r_squared))
print(paste("Adjusted R-squared:", adj_r_squared))
p_values <- summary(model)$coefficients[, 4]
print(p_values)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = User_Rating)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = x)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(User_Rating = x)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = User_Rating)), add = TRUE, col = "red", lwd = 2)
data <- df(x = x, y = y)
data <- df(x = User_Rating, y = Global_Sales)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = User_Rating)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(User_Rating = User_Rating)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * expr(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(User_Rating = x)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = User_Rating)), add = TRUE, col = "red", lwd = 2)
y <- a * exp(b * x) + rnorm(n, mean = 0, sd = 1)
model <- lm(Active_Players ~ User_Rating + Platform, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating + Platform+Release_Year, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating + Platform, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating + Platform+Genre, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating + Platform+Genre+Global_Sales, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating + Platform+Genre, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
model <- lm(Active_Players ~ User_Rating+Genre, data = df)
summary(model)
plot(df$User_Rating, df$Active_Players, xlab="User Rating", ylab="Active Players" )
abline(model, col="red")
install.packages("minpack.lm")
library(tidyverse)
library(boot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(minpack.lm)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("game_dataset.csv")
start_value <- c(a = Active_Players, b = User_Rating)
x <- 1:10
y <- x^2 + 2 * x + 2 + rnorm(10, 0, 10)
model <- df(x,y)
x <- 1:10
y <- x^2 + 2 * x + 2 + rnorm(10, 0, 10)
model <- df(User_Rating,Global_Sales)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 100
x <- seq(0, 10, length.out = n)
a <- 2
b <- 0.5
y <- a * exp(b * x) + rnorm(n, mean = 0, sd = 1)
data <- data.frame(x = x, y = y)
# Fit the non-linear model
model <- nls(y ~ a * exp(b * x), data = data, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points and fitted curve
plot(data$x, data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = data.frame(x = x)), add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("Data Points", "Fitted Curve"),
col = c("blue", "red"), pch = c(16, NA), lty = c(NA, 1))
# Diagnostic plots
fitted_values <- predict(model)
residuals <- residuals(model)
par(mfrow = c(1, 2))
plot(fitted_values, residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
qqnorm(residuals, main = "Normal Q-Q Plot of Residuals", pch = 16, col = "blue")
qqline(residuals, col = "red")
# Extract and print statistics
parameters <- coef(model)
print(parameters)
resid_se <- summary(model)$sigma
print(paste("Residual Standard Error:", resid_se))
conf_int <- confint(model)
print(conf_int)
set.seed(123)
# Fit the non-linear model
model <- nls(y ~ a * exp(b * x), data = data, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points and fitted curve
plot(data$x, data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = data.frame(x = x)), add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("Data Points", "Fitted Curve"),
col = c("blue", "red"), pch = c(16, NA), lty = c(NA, 1))
# Diagnostic plots
fitted_values <- predict(model)
residuals <- residuals(model)
par(mfrow = c(1, 2))
plot(fitted_values, residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
qqnorm(residuals, main = "Normal Q-Q Plot of Residuals", pch = 16, col = "blue")
qqline(residuals, col = "red")
# Extract and print statistics
parameters <- coef(model)
print(parameters)
resid_se <- summary(model)$sigma
print(paste("Residual Standard Error:", resid_se))
conf_int <- confint(model)
print(conf_int)
set.seed(123)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * x), data = data, start = list(a = 1, b = 0.1))
set.seed(123)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * x), data = df, start = list(a = 1, b = 0.1))
set.seed(123)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points and fitted curve
plot(data$x, data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = data.frame(x = x)), add = TRUE, col = "red", lwd = 2)
set.seed(123)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points and fitted curve
plot(data$x, data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = df(x = x)), add = TRUE, col = "red", lwd = 2)
set.seed(123)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points and fitted curve
plot(data$x, data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, df = data.framef(x = x)), add = TRUE, col = "red", lwd = 2)
# Assuming your data frame is named `my_data` and has columns `x` and `y`
# Example: my_data <- data.frame(x = ..., y = ...)
# Step 1: Fit the Non-Linear Model
# Use the `nls()` function to fit the non-linear model
# Here, we assume an exponential growth model: y = a * exp(b * x)
model <- nls(y ~ a * exp(b * x), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Step 2: Plot the Data and Fitted Curve
# Plot the data points
plot(my_data$x, my_data$y, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
# Assuming your data frame is named `my_data` and has columns `x` and `y`
# Example: my_data <- data.frame(x = ..., y = ...)
# Step 1: Fit the Non-Linear Model
# Use the `nls()` function to fit the non-linear model
# Here, we assume an exponential growth model: y = a * exp(b * x)
model <- nls(y ~ a * exp(b * x), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Step 2: Plot the Data and Fitted Curve
# Plot the data points
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
# Add the fitted curve
curve(predict(model, newdata = data.frame(x = my_data$x)), add = TRUE, col = "red", lwd = 2)
# Assuming your data frame is named `my_data` and has columns `x` and `y`
# Example: my_data <- data.frame(x = ..., y = ...)
# Step 1: Fit the Non-Linear Model
# Use the `nls()` function to fit the non-linear model
# Here, we assume an exponential growth model: y = a * exp(b * x)
model <- nls(y ~ a * exp(b * x), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Step 2: Plot the Data and Fitted Curve
# Plot the data points
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
# Add the fitted curve
curve(predict(model, newdata = data.frame(x = df$User_Rating)), add = TRUE, col = "red", lwd = 2)
library(tidyverse)
library(boot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(expr)
library(tidyverse)
library(boot)
library(dplyr)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("game_dataset.csv")
# Assuming your data frame is named `my_data` and has columns `x` and `y`
# Example: my_data <- data.frame(x = ..., y = ...)
# Step 1: Fit the Non-Linear Model
# Use the `nls()` function to fit the non-linear model
# Here, we assume an exponential growth model: y = a * exp(b * x)
model <- nls(y ~ a * exp(b * x), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Step 2: Plot the Data and Fitted Curve
# Plot the data points
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
# Add the fitted curve
curve(predict(model, newdata = data.frame(x = df$User_Rating)), add = TRUE, col = "red", lwd = 2)
# Assuming your data frame is named `my_data` and has columns `x` and `y`
# Example: my_data <- data.frame(x = ..., y = ...)
# Step 1: Fit the Non-Linear Model
# Use the `nls()` function to fit the non-linear model
# Here, we assume an exponential growth model: y = a * exp(b * x)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Step 2: Plot the Data and Fitted Curve
# Plot the data points
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
# Add the fitted curve
curve(predict(model, newdata = data.frame(x = df$User_Rating)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
curve(predict(model, newdata = data.frame(x = df$User_Rating)), add = TRUE, col = "red", lwd = 2)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "x", ylab = "y", pch = 16, col = "blue")
predict_fun <- function(x) {
predict(model, newdata = data.frame(User_Rating = x))
}
curve(predict(model, newdata = data.frame(x = df$User_Rating)), add = TRUE, col = "red", lwd = 2)
# Fit the non-linear model
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
# Display the summary of the model
summary(model)
# Plot the data points
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "User_Rating", ylab = "Global_Sales", pch = 16, col = "blue")
# Define a function to predict using the fitted model
predict_fun <- function(x) {
predict(model, newdata = data.frame(User_Rating = x))
}
# Add the fitted curve using the `curve()` function
curve(predict_fun(x), add = TRUE, col = "red", lwd = 2)
# Add a legend
legend("topleft", legend = c("Data Points", "Fitted Curve"),
col = c("blue", "red"), pch = c(16, NA), lty = c(NA, 1))
# Diagnostic plots
fitted_values <- predict(model)
residuals <- residuals(model)
par(mfrow = c(1, 2))
plot(fitted_values, residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
qqnorm(residuals, main = "Normal Q-Q Plot of Residuals", pch = 16, col = "blue")
qqline(residuals, col = "red")
# Extract and print statistics
parameters <- coef(model)
print(parameters)
resid_se <- summary(model)$sigma
print(paste("Residual Standard Error:", resid_se))
conf_int <- confint(model)
print(conf_int)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "User Rating", ylab = "Global Sales", pch = 16, col = "blue")
predict_fun <- function(x) {
predict(model, newdata = data.frame(User_Rating = x))
}
curve(predict_fun(x), add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("Data Points", "Fitted Curve"),
col = c("blue", "red"), pch = c(16, NA), lty = c(NA, 1))
fitted_values <- predict(model)
residuals <- residuals(model)
par(mfrow = c(1, 2))
plot(fitted_values, residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
qqnorm(residuals, main = "Normal Q-Q Plot of Residuals", pch = 16, col = "blue")
qqline(residuals, col = "red")
parameters <- coef(model)
print(parameters)
resid_se <- summary(model)$sigma
print(paste("Residual Standard Error:", resid_se))
conf_int <- confint(model)
print(conf_int)
model <- nls(Global_Sales ~ a * exp(b * User_Rating), data = df, start = list(a = 1, b = 0.1))
summary(model)
plot(df$User_Rating, df$Global_Sales, main = "Non-linear Regression: Exponential Growth",
xlab = "User Rating", ylab = "Global Sales", pch = 16, col = "blue")
predict_fun <- function(x) {
predict(model, newdata = data.frame(User_Rating = x))
}
curve(predict_fun(x), add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("Data Points", "Fitted Curve"),
col = c("blue", "red"), pch = c(16, NA), lty = c(NA, 1))
fitted_values <- predict(model)
residuals <- residuals(model)
par(mfrow = c(1, 2))
plot(fitted_values, residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals", pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
qqnorm(residuals, main = "Normal Q-Q Plot of Residuals", pch = 16, col = "blue")
qqline(residuals, col = "red")
parameters <- coef(model)
print(parameters)
resid_se <- summary(model)$sigma
print(paste("Residual Standard Error:", resid_se))
conf_int <- confint(model)
print(conf_int)
